version: '3'
services:
  front:
    image: gcr.io/kubi-012023/front:1.0.0
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: front-angular
    ports:
      - "80:80"
    depends_on:
      - back
    networks:
      - frontend-backend-network

  back:
    image: gcr.io/kubi-012023/back:1.0.0
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: back-php
    ports:
        - "9000:9000"
    volumes:
      - ./back:/var/www
    networks:
      - frontend-backend-network
      - backend-nginx-network
      - indexer-network
    depends_on:
      - mysql
      - rabbitmq
      - elasticsearch
      - back-nginx

  back-nginx: 
    image: nginx:1.17-alpine
    restart: unless-stopped
    container_name: nginx
    ports:
      - 8000:80
    volumes:
      - ./back:/var/www
      - ./back/nginx:/etc/nginx/conf.d/
    networks:
      - backend-nginx-network

  reporting:
    image: gcr.io/kubi-012023/reporting:1.0.0
    build:
      context: ./reporting
      dockerfile: Dockerfile
    restart: on-failure:5
    container_name: reporting-golang
    ports:
      - "4000:4000"
    depends_on:
      - mysql
    networks:
      - reporting-network

  indexer:
    image: gcr.io/kubi-012023/indexer:1.0.0
    build: ./indexer
    deploy:
    restart: on-failure:5
    container_name: indexer-nodejs
    ports:
      - "9090:9090"
    depends_on:
      - rabbitmq
      - elasticsearch
    networks:
      - indexer-network

  mysql:
    image: mysql:8.0
    restart: unless-stopped
    container_name: mysql
    environment:
      MYSQL_DATABASE: 'db' 
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    expose:    
      - '3306'
    volumes:
      - my-db:/var/lib/mysql
    networks:
      - indexer-network
      - reporting-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - indexer-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - indexer-network


  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.1
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    networks:
      - indexer-network
    depends_on:
      - elasticsearch

volumes:
  my-db:

networks:
  frontend-backend-network:
    driver: bridge
  backend-nginx-network:
    driver: bridge
  indexer-network:
    driver: bridge
  reporting-network:
    driver: bridge
