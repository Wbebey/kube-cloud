apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: back-app-pvc
  namespace: back-private
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: back-private
data:
  default.conf: |
    server {
        listen 80;
        index index.php index.html;
        error_log  /var/log/nginx/error.log;
        access_log /var/log/nginx/access.log;
        root /var/www/public;
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }
        location / {
            try_files $uri $uri/ /index.php?$query_string;
            gzip_static on;
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-deployment
  namespace: back-private
  labels:
    app: back
spec:
  replicas: 2
  selector:
    matchLabels:
      app: back
  template:
    metadata:
      labels:
        app: back
    spec:
      restartPolicy: Always
      volumes:
      - name: back-app-volume
        persistentVolumeClaim:
          claimName: back-app-pvc
      - name: nginx-conf
        configMap:
          name: nginx-conf
      containers:
      - name: back
        image: {{ docker_image }}
        ports:
        - containerPort: 9000
        imagePullPolicy: Always
        volumeMounts:
        - name: back-app-volume
          mountPath: /var/www
      - name: back-nginx
        image: nginx:1.17-alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: back-app-volume
          mountPath: /var/www
        - name: nginx-conf
          mountPath: /etc/nginx/conf.d/
---
apiVersion: v1
kind: Service
metadata:
  name: back-service
  namespace: back-private
spec:
  type: ClusterIP
  selector:
    app: back
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: back-ingress
  namespace: back-private
  annotations:
    cert-manager.io/issuer: "letsencrypt-kubi-cloud"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2$3
    nginx.ingress.kubernetes.io/proxy-body-size: 16m
    ginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "*"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://back.zdt.fr/*"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
  - hosts:
    - back.zdt.fr
    secretName: bi-ingress
  rules:
  - host: back.zdt.fr
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: back-service
            port:
              number: 80